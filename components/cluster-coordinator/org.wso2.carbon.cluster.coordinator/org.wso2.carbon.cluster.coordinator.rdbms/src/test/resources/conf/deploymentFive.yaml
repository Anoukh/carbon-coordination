################################################################################
#   Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved
#
#   Licensed under the Apache License, Version 2.0 (the \"License\");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an \"AS IS\" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

  # Carbon Configuration Parameters
wso2.carbon:
    # value to uniquely identify a server
  id: wso2-sp
    # server name
  name: WSO2 Stream Processor
    # ports used by this server
  ports:
      # port offset
    offset: 0

  # Configuration used for the databridge communication
databridge.config:
    # No of worker threads to consume events
    # THIS IS A MANDATORY FIELD
  workerThreads: 10
    # Maximum amount of messages that can be queued internally in MB
    # THIS IS A MANDATORY FIELD
  maxEventBufferCapacity: 10000000
    # Queue size; the maximum number of events that can be stored in the queue
    # THIS IS A MANDATORY FIELD
  eventBufferSize: 2000
    # Keystore file path
    # THIS IS A MANDATORY FIELD
  keyStoreLocation : ${carbon.home}/resources/security/wso2carbon.jks
    # Keystore password
    # THIS IS A MANDATORY FIELD
  keyStorePassword : wso2carbon
    # Session Timeout value in mins
    # THIS IS A MANDATORY FIELD
  clientTimeoutMin: 30
    # Data receiver configurations
    # THIS IS A MANDATORY FIELD
  dataReceivers:
  -
      # Data receiver configuration
    dataReceiver:
        # Data receiver type
        # THIS IS A MANDATORY FIELD
      type: Thrift
        # Data receiver properties
      properties:
        tcpPort: '7611'
        sslPort: '7711'

  -
      # Data receiver configuration
    dataReceiver:
        # Data receiver type
        # THIS IS A MANDATORY FIELD
      type: Binary
        # Data receiver properties
      properties:
        tcpPort: '9611'
        sslPort: '9711'
        tcpReceiverThreadPoolSize: '100'
        sslReceiverThreadPoolSize: '100'
        hostName: 0.0.0.0

  # Configuration of the Data Agents - to publish events through databridge
data.agent.config:
    # Data agent configurations
    # THIS IS A MANDATORY FIELD
  agents:
  -
      # Data agent configuration
    agentConfiguration:
        # Data agent name
        # THIS IS A MANDATORY FIELD
      name: Thrift
        # Data endpoint class
        # THIS IS A MANDATORY FIELD
      dataEndpointClass: org.wso2.carbon.databridge.agent.endpoint.thrift.ThriftDataEndpoint
        # Data publisher strategy
      publishingStrategy: async
        # Trust store path
      trustStorePath: '${carbon.home}/resources/security/client-truststore.jks'
        # Trust store password
      trustStorePassword: 'wso2carbon'
        # Queue Size
      queueSize: 32768
        # Batch Size
      batchSize: 200
        # Core pool size
      corePoolSize: 1
        # Socket timeout in milliseconds
      socketTimeoutMS: 30000
        # Maximum pool size
      maxPoolSize: 1
        # Keep alive time in pool
      keepAliveTimeInPool: 20
        # Reconnection interval
      reconnectionInterval: 30
        # Max transport pool size
      maxTransportPoolSize: 250
        # Max idle connections
      maxIdleConnections: 250
        # Eviction time interval
      evictionTimePeriod: 5500
        # Min idle time in pool
      minIdleTimeInPool: 5000
        # Secure max transport pool size
      secureMaxTransportPoolSize: 250
        # Secure max idle connections
      secureMaxIdleConnections: 250
        # secure eviction time period
      secureEvictionTimePeriod: 5500
        # Secure min idle time in pool
      secureMinIdleTimeInPool: 5000
        # SSL enabled protocols
      sslEnabledProtocols: TLSv1,TLSv1.1,TLSv1.2
        # Ciphers
      ciphers: SSL_RSA_WITH_RC4_128_MD5,SSL_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA
  -
      # Data agent configuration
    agentConfiguration:
        # Data agent name
        # THIS IS A MANDATORY FIELD
      name: Binary
        # Data endpoint class
        # THIS IS A MANDATORY FIELD
      dataEndpointClass: org.wso2.carbon.databridge.agent.endpoint.binary.BinaryDataEndpoint
        # Data publisher strategy
      publishingStrategy: async
        # Trust store path
      trustStorePath: '${carbon.home}/resources/security/client-truststore.jks'
        # Trust store password
      trustStorePassword: 'wso2carbon'
        # Queue Size
      queueSize: 32768
        # Batch Size
      batchSize: 200
        # Core pool size
      corePoolSize: 1
        # Socket timeout in milliseconds
      socketTimeoutMS: 30000
        # Maximum pool size
      maxPoolSize: 1
        # Keep alive time in pool
      keepAliveTimeInPool: 20
        # Reconnection interval
      reconnectionInterval: 30
        # Max transport pool size
      maxTransportPoolSize: 250
        # Max idle connections
      maxIdleConnections: 250
        # Eviction time interval
      evictionTimePeriod: 5500
        # Min idle time in pool
      minIdleTimeInPool: 5000
        # Secure max transport pool size
      secureMaxTransportPoolSize: 250
        # Secure max idle connections
      secureMaxIdleConnections: 250
        # secure eviction time period
      secureEvictionTimePeriod: 5500
        # Secure min idle time in pool
      secureMinIdleTimeInPool: 5000
        # SSL enabled protocols
      sslEnabledProtocols: TLSv1,TLSv1.1,TLSv1.2
        # Ciphers
      ciphers: SSL_RSA_WITH_RC4_128_MD5,SSL_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA

  # Deployment configuration parameters
wso2.artifact.deployment:
    # Scheduler update interval
  updateInterval: 5

cluster.config:
  enabled: true
  groupId: testGroupOne
  coordinationStrategyClass: org.wso2.carbon.cluster.coordinator.rdbms.RDBMSCoordinationStrategy
  strategyConfig:
    datasource: WSO2_CLUSTER_DB  # Datasource is not defined in yaml since test cases will internally create datasource
    heartbeatInterval:
    heartbeatMaxRetry:
    eventPollingInterval:
    queries:
      -
       mappings:
          IS_LEADER_STATUS_TABLE_EXISTS: SELECT * FROM LEADER_STATUS_TABLE
          IS_CLUSTER_NODE_STATUS_TABLE_EXISTS: SELECT * FROM CLUSTER_NODE_STATUS_TABLE
          IS_MEMBERSHIP_EVENT_TABLE_EXISTS: SELECT * FROM MEMBERSHIP_EVENT_TABLE
          IS_REMOVED_MEMBERS_TABLE_EXISTS: SELECT * FROM REMOVED_MEMBERS_TABLE
          CREATE_LEADER_STATUS_TABLE: CREATE TABLE IF NOT EXISTS LEADER_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID))
          CREATE_CLUSTER_NODE_STATUS_TABLE: CREATE TABLE IF NOT EXISTS CLUSTER_NODE_STATUS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL,IS_NEW_NODE INT NOT NULL, LAST_HEARTBEAT BIGINT NOT NULL, PRIMARY KEY (GROUP_ID,NODE_ID))
          CREATE_MEMBERSHIP_EVENT_TABLE: CREATE TABLE IF NOT EXISTS MEMBERSHIP_EVENT_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, CHANGE_TYPE INT NOT NULL, CHANGED_MEMBER_ID VARCHAR(512) NOT NULL)
          CREATE_REMOVED_MEMBERS_TABLE: CREATE TABLE IF NOT EXISTS REMOVED_MEMBERS_TABLE (GROUP_ID VARCHAR(512) NOT NULL, NODE_ID VARCHAR(512) NOT NULL, PROPERTY_MAP BLOB NOT NULL, REMOVED_MEMBER_ID VARCHAR(512) NOT NULL)
          GET_COORDINATOR_NODE_ID: SELECT NODE_ID FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
          GET_COORDINATOR_NODE: SELECT PROPERTY_MAP FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID =? AND NODE_ID =?
          MARK_NODE_NOT_NEW: UPDATE CLUSTER_NODE_STATUS_TABLE SET IS_NEW_NODE =0 WHERE NODE_ID =? AND GROUP_ID =?
          INSERT_COORDINATOR_ROW: INSERT INTO LEADER_STATUS_TABLE (GROUP_ID, NODE_ID, LAST_HEARTBEAT) VALUES (?,?,?)
          INSERT_NODE_HEARTBEAT_ROW: INSERT INTO CLUSTER_NODE_STATUS_TABLE (NODE_ID, LAST_HEARTBEAT, GROUP_ID, PROPERTY_MAP, IS_NEW_NODE) VALUES (?,?,?,?,1)
          UPDATE_PROPERTIES_MAP: UPDATE CLUSTER_NODE_STATUS_TABLE SET PROPERTY_MAP =? WHERE NODE_ID =? AND GROUP_ID =?
          GET_COORDINATOR_ROW_FOR_NODE_ID: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
          GET_COORDINATOR_HEARTBEAT: SELECT LAST_HEARTBEAT FROM LEADER_STATUS_TABLE WHERE GROUP_ID =?
          UPDATE_COORDINATOR_HEARTBEAT: UPDATE LEADER_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
          UPDATE_NODE_HEARTBEAT: UPDATE CLUSTER_NODE_STATUS_TABLE SET LAST_HEARTBEAT =? WHERE NODE_ID =? AND GROUP_ID =?
          GET_ALL_NODE_HEARTBEAT: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=?
          GET_NODE_DATA: SELECT GROUP_ID, NODE_ID, PROPERTY_MAP, LAST_HEARTBEAT, IS_NEW_NODE FROM CLUSTER_NODE_STATUS_TABLE WHERE GROUP_ID=? AND NODE_ID=?
          DELETE_COORDINATOR: DELETE FROM LEADER_STATUS_TABLE WHERE GROUP_ID =? AND LAST_HEARTBEAT < ?
          DELETE_NODE_HEARTBEAT: DELETE FROM CLUSTER_NODE_STATUS_TABLE WHERE NODE_ID =? AND GROUP_ID =?
          CLEAR_NODE_HEARTBEATS: DELETE FROM CLUSTER_NODE_STATUS_TABLE
          CLEAR_COORDINATOR_HEARTBEAT: DELETE FROM LEADER_STATUS_TABLE
          INSERT_MEMBERSHIP_EVENT: INSERT INTO MEMBERSHIP_EVENT_TABLE (NODE_ID, GROUP_ID, CHANGE_TYPE, CHANGED_MEMBER_ID) VALUES ( ?,?,?,?)
          INSERT_REMOVED_MEMBER_DETAILS: INSERT INTO REMOVED_MEMBERS_TABLE (NODE_ID, GROUP_ID, REMOVED_MEMBER_ID, PROPERTY_MAP) VALUES ( ?,?,?,?)
          SELECT_MEMBERSHIP_EVENT: SELECT CHANGE_TYPE, CHANGED_MEMBER_ID, GROUP_ID FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =? ORDER BY CHANGE_TYPE
          SELECT_REMOVED_MEMBER_DETAILS: SELECT REMOVED_MEMBER_ID, PROPERTY_MAP, GROUP_ID FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND GROUP_ID =?
          DELETE_REMOVED_MEMBER_DETAIL_FOR_NODE: DELETE FROM REMOVED_MEMBERS_TABLE WHERE NODE_ID =? AND REMOVED_MEMBER_ID =? AND  GROUP_ID =?
          CLEAR_ALL_MEMBERSHIP_EVENTS: DELETE FROM  MEMBERSHIP_EVENT_TABLE
          CLEAN_MEMBERSHIP_EVENTS_FOR_NODE: DELETE FROM MEMBERSHIP_EVENT_TABLE WHERE NODE_ID =?

       type: H2
       version: default